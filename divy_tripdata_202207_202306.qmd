---
title: "Cyclist_data"
author: "Ajay"
format: html
code-fold: show
---

### Loading `tidyverse` and `gt` packages

```{r loading packages}
library(tidyverse)
library(gt)
```

### Loading data of previous 12 months

```{r loading data}
#| results: hide
#| message: false

trpdata_july_2022<-read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202207-divvy-tripdata/202207-divvy-tripdata.csv")

trpdata_aug_2022 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202208-divvy-tripdata/202208-divvy-tripdata.csv")

trpdata_sept_2022<- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202209-divvy-tripdata/202209-divvy-publictripdata.csv")

trpdata_oct_2022<- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202210-divvy-tripdata/202210-divvy-tripdata_raw.csv")

trpdata_nov_2022<- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202211-divvy-tripdata/202211-divvy-tripdata.csv")

trpdata_dec_2022 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202212-divvy-tripdata/202212-divvy-tripdata.csv")

trpdata_jan_2023 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202301-divvy-tripdata/202301-divvy-tripdata.csv")

trpdata_feb_2023 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202302-divvy-tripdata/202302-divvy-tripdata.csv")

trpdata_mar_2023 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202303-divvy-tripdata/202303-divvy-tripdata.csv")

trpdata_apr_2023 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202304-divvy-tripdata/202304-divvy-tripdata.csv")

trpdata_may_2023 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202305-divvy-tripdata/202305-divvy-tripdata.csv")

trpdata_june_2023 <- read_csv("F:/Data_Sci/Cap_Stone_Project/Cyclist_trip_data/202306-divvy-tripdata/202306-divvy-tripdata.csv")

```

### Combining all the monthly data to one previous year data(`data_prev_year`).

```{r Combining data}
data_prev_year <- rbind(trpdata_july_2022, trpdata_aug_2022,
                   trpdata_sept_2022, trpdata_oct_2022,
                   trpdata_nov_2022, trpdata_dec_2022,
                   trpdata_jan_2023, trpdata_feb_2023,
                   trpdata_mar_2023, trpdata_apr_2023,
                   trpdata_may_2023, trpdata_june_2023)

glimpse(data_prev_year)
```

-   Checking and counting "NA" in each column of the dataframe.

```{r}
na_in_cols <- data_prev_year %>% map(is.na) %>% map(sum) %>% unlist()

na_in_cols
```

-   As NA's are not present in the `started_at` and `ended_at` we don't need to bother about writing `na.rm` during aggregation.

-   Finding the length of rides taken by riders by making a new column `ride_length` in minutes and making sure that the `ride_length` is not negative by using `if_else` function. Eliminating stations where station names and longitude and latitude co-ordinates are not present.

```{r finding ride length}
data_prev_year <- data_prev_year %>% 
  mutate(ride_length = difftime(ended_at, started_at,
                                units = "min")) %>%
  mutate(ride_length = as.numeric(ride_length)) %>% 
  mutate(ride_length = if_else(ride_length < 0, 0, ride_length)) %>% 
  filter(start_station_name != "" & end_station_name != "" & 
         !is.na(start_lat) & !is.na(start_lng) &
         !is.na(end_lat) & !is.na(end_lng)) %>% arrange(ride_length)


glimpse(data_prev_year)
```

-   A total of `r sum(data_prev_year$ride_length)/60` minutes were ridden by both casual and membership holders.

-   Aggregating data to see **"Average minutes per ride"** grouped by "bike type" and "rider type" after removing rides less than 2 minutes (As rides less than 2 minutes tend to have the same start and stop stations.).

```{r TB-Average minutes per ride}
data_prev_year_aggregate <- data_prev_year%>% 
  select(ride_id, rideable_type, member_casual, started_at, ended_at,
         ride_length, everything()) %>%
  filter(ride_length >= 2) %>% 
  summarise("Number of Rides" = n(),
            "Ride Length" = sum(ride_length, na.rm = TRUE),
            "Max Ride Length" = round(max(ride_length), 2),
            "Avg Ride Length in Minutes" = round(mean(ride_length), 2),
            .by = c(member_casual, rideable_type)) %>% 
  arrange(desc("Avg Ride Length in Minutes")) %>% 
  gt() %>% tab_header(title = "Average length of Rides") %>% 
  cols_label(member_casual = "Rider type",
             rideable_type = "Bike type")

data_prev_year_aggregate
```

   We can clearly observe that **member** riders have more number of rides with both **classic and electric bikes** while the average ride length is high with **casual** riders. While the maximum ride lengths did not differ by much.

-   Calculating and visualizing "Average ride length" by "Rider type".

```{r Plot-Average ride length}
average_ride_by_rideable_type <- data_prev_year %>%
  rename("Rider type" = member_casual, "Bike type" = rideable_type) %>% 
  summarise(ride_length = sum(ride_length, na.rm = TRUE),
            ride_count = n(),
            avg_ride_length = ride_length/ride_count,
            .by = c(`Rider type`, `Bike type`)) %>% 
  ggplot(aes(`Rider type`, avg_ride_length)) + 
  geom_col(aes(fill = `Bike type`), position = "dodge") + 
  labs(x = "Bike type", y = "Avg Length of Ride(Minutes)",
       title  = "Avg ride length by Bike type")

average_ride_by_rideable_type
```

  The above graph clearly shows that members average ride length between bike types doesn't differ much for **member** riders but differs with **casual** riders upto **8 minutes**.


-   Calculating and visualizing ride patterns in a week for number of rides.

```{r plot-Riding pattrens in weekdays}
rideable_order <- c("classic_bike", "electric_bike", "docked_bike")

rides_on_days <- data_prev_year %>%
  filter(rideable_type != "docked_bike") %>%
  mutate(month = month(started_at, label = TRUE, abbr = FALSE)) %>% 
  mutate(rideable_type = factor(rideable_type, levels = rideable_order)) %>% ggplot(aes(wday(started_at, label = TRUE, abbr = FALSE))) + 
  geom_bar(aes(fill = member_casual), position = "dodge") +
  facet_wrap(~month, nrow = 3) + 
  labs(x = "Day of the Week", y = "Number of rides",
       title = "Riding pattrens on week days of each month",
       subtitle = "From July-2022 to June-2023") +
  theme(legend.position = "top",
        axis.text.x = element_text(angle = 45, hjust = 1))

rides_on_days
```

  The above graph clearly shows how the number of rides change due to seasons. In winters the number of riders decrease very drastically because of temperature and snow. While in Summers the number of rides are its peak.


-   Comparing variation in ride lengths of average and total ride lengths by bike type.

```{r Riding pattrens in week days based on ride_length}
rides_on_days_len <- data_prev_year %>%
  mutate(day = wday(started_at, label = TRUE, abbr = FALSE),
         month = month(started_at, label = TRUE, abbr = FALSE)) %>% 
  summarise(ride_count = n(),
            ride_length = sum(ride_length, na.rm = TRUE),
            .by = c(month, day, member_casual)) %>%
  ggplot(aes(day, ride_length))+
  geom_col(aes(fill = member_casual), position = "dodge")+
  facet_wrap(~month, ncol = 3)+
  theme(legend.position = "top",
        axis.text.x = element_text(angle = 45, hjust = 1))

rides_on_days_len

rides_on_days_len_avg <- data_prev_year %>%
  mutate(day = wday(started_at, label = TRUE, abbr = FALSE),
         month = month(started_at, label = TRUE, abbr = FALSE)) %>% 
  summarise(ride_count = n(),
            avg_ride_length = mean(ride_length, na.rm = TRUE),
            .by = c(month, day, member_casual)) %>%
  ggplot(aes(day, avg_ride_length))+
  geom_col(aes(fill = member_casual), position = "dodge")+
  facet_wrap(~month, ncol = 3)+
  theme(legend.position = "top",
        axis.text.x = element_text(angle = 45, hjust = 1))

rides_on_days_len_avg
```

  The **ride length** is varying across months and seasons just as number of rides but **average ride length** is not fluctuating that much.


-   Removing "NA" and blanks from the stations columns.

```{r Removing NA & blanks}
data_prev_year <- data_prev_year %>%
  drop_na(start_station_name) %>% 
  drop_na(end_station_name) %>% 
  filter(start_station_name != "" & end_station_name != "",
         started_at != ended_at) 

glimpse(data_prev_year)

```

-   Making a new column to identify travelled stations.

```{r Creating travelled stations}
data_prev_year <- data_prev_year %>% 
  mutate(stations_travelled = paste(start_station_name, 
                                     "-", end_station_name))

glimpse(data_prev_year)
```

-   Finding which route is traveled most by **casual riders**.

```{r most travelled routes by casuals}
most_travelled_routes_casual <- data_prev_year %>%
  filter(member_casual == "casual") %>% 
  summarise(ride_count = n(),
            avg_ride_length = round(mean(ride_length), 2),
            .by = c(stations_travelled)) %>%
  arrange(desc(ride_count))

head(most_travelled_routes_casual)
NROW(most_travelled_routes_casual)
```

  **Streeter Dr & Grand Ave - Streeter Dr & Grand Ave** stands to be the most popular station with **9698 rides** by **casual** riders.


```{r most travelled route by members, echo=FALSE}
most_travelled_routes_member <- data_prev_year  %>%
  filter(member_casual == "member") %>% 
  summarise(ride_count = n(),
            total_ride_length = sum(ride_length),
            ride_length = round(mean(ride_length), 2),
            .by = stations_travelled) %>% arrange(desc(ride_count))

head(most_travelled_routes_member)
NROW(most_travelled_routes_member)
```

  **Ellis Ave & 60th St - University Ave & 57th St** stands as the most traveled route by **member** riders with **6153** rides per anum.


-   Finding which station has most ride starting points and which station has most ending points.

```{r staions with most starting and ending points}

most_starting_points <- data_prev_year %>% 
  summarise(ride_count = n(),
            .by = start_station_name) %>%
  select(start_station_name, ride_count) %>%
  slice_max(ride_count, n = 10)

most_starting_points


most_starting_points$ride_count %>% sum()

most_ending_points <- data_prev_year %>% 
  summarise(ride_count = n(),
            .by = end_station_name) %>%
  select(end_station_name, ride_count)  %>% 
  slice_max(ride_count, n = 10)

most_ending_points
most_ending_points$ride_count %>% sum()
```

**Streeter Dr & Grand Ave** found to be the most popular station as most rides start and end at that station.


-   Finding all the stations and number of total unique stations.

```{r finding unique stations}
unique_start_stations_name <- data_prev_year %>%
  filter(start_station_name != "") %>% 
  distinct(start_station_name)

unique_end_station_name <- data_prev_year %>%
  filter(end_station_name != "") %>% 
  distinct(end_station_name)

unique_stations <- 
  union(unique_end_station_name$end_station_name,
        unique_start_stations_name$start_station_name)

head(unique_stations)
NROW(unique_stations)
```
